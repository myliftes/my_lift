<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chillax.dao.StandardDao" >  
    <resultMap id="BaseResultMap" type="com.chillax.dto.Standard"> 
		<result column="C_ID" property="id" jdbcType="INTEGER" />
		<result column="C_NAME" property="name" jdbcType="VARCHAR" />
		<result column="C_MINWEIGHT" property="minWeight" jdbcType="DOUBLE" /> 
		<result column="C_MAXWEIGHT" property="maxWeight" jdbcType="DOUBLE" /> 
		<result column="C_MINLENGTH" property="minLength" jdbcType="DOUBLE" /> 
		<result column="C_MAXLENGTH" property="maxLength" jdbcType="DOUBLE" /> 
		<result column="C_OPERATINGTIME" property="operatingTime" jdbcType="TIMESTAMP" /> 
		<result column="C_OPERATOR" property="operator" jdbcType="VARCHAR" /> 
		<result column="C_OPERATINGCOMPANY" property="operatingCompany" jdbcType="VARCHAR" /> 
		<result column="C_CREATOR" property="creator" jdbcType="VARCHAR" /> 
		<result column="C_CREATE_TIME" property="create_time" jdbcType="VARCHAR" /> 
		<result column="C_REVISOR" property="revisor" jdbcType="VARCHAR" /> 
		<result column="C_REVICE_TIME" property="revice_time" jdbcType="VARCHAR" /> 
		<result column="C_VERSION" property="verison" jdbcType="VARCHAR" /> 
	</resultMap>

	<sql id="Base_Column_List">
		C_ID, C_NAME, C_MINWEIGHT, C_MAXWEIGHT, C_MINLENGTH ,C_MAXLENGTH, C_OPERATINGTIME,C_OPERATOR,
		C_OPERATINGCOMPANY
	</sql>

	<!-- 查询用户-->
	<select id="queryByPrimaryKey" resultMap="BaseResultMap"		parameterType="java.util.Map">
	<!-- 
		parameterType="java.lang.Integer">
	 -->
		SELECT
		<include refid="Base_Column_List" />
		FROM T_STANDARD
		
		<!--  WHERE C_ID = #{id,jdbcType=INTEGER} -->
		
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			
			<if test="id != null" >
				AND C_ID = #{id,jdbcType=INTEGER}
			</if>
			 
		</trim>
	</select>
	
	<!-- 查询用户-->
	<select id="findByPage" parameterType="com.chillax.dto.Standard" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		FROM T_STANDARD WHERE C_ID = #{Id}
	</select>  

	<!-- 添加数据 -->
	<insert id="addStandard" parameterType="om.chillax.dto.Standard" >
	INSERT INTO T_STANDARD   (
		C_ID,C_NAME,C_MINWEIGHT,C_MAXWEIGHT,C_MINLENGTH,C_MAXLENGTH,C_OPERATINGTIME,C_OPERATOR,		
		C_OPERATINGCOMPANY,C_CREATOR,C_CREATE_TIME,C_REVISOR,C_REVICE_TIME,C_VERSION)
		values (
		#{id,jdbcType=INTEGER},#{name,jdbcType=VARCHAR},#{minWeight,jdbcType=DOUBLE},#{maxWeight,jdbcType=DOUBLE},
		#{minLength,jdbcType=DOUBLE},#{maxLength,jdbcType=DOUBLE},#{operatingTime,jdbcType=TIMESTAMP},
		#{operator,jdbcType=VARCHAR},#{operatingCompany,jdbcType=VARCHAR},#{creator,jdbcType=VARCHAR},
		#{create_time,jdbcType=TIMESTAMP},#{revisor,jdbcType=VARCHAR},#{revice_time,jdbcType=TIMESTAMP},
		#{verison,jdbcType=INTEGER})
  	</insert>
	
	<!-- 批量插入用户 -->
	<insert id="insertUserByBatch" parameterType="java.util.List" >
    insert into USER
       (C_ID, C_PROVINCE, C_CITY, C_DISTRICT, C_POSTCODE ,C_CITYCODE, C_SHORTCODE)
    select A.* from
         (
         <foreach collection="list" item="standard" index="index" separator="union">
             select 
             #{standard.id,jdbcType=INTEGER},
             #{standard.name,jdbcType=VARCHAR},
             #{standard.password,jdbcType=VARCHAR},
             #{standard.age,jdbcType=INTEGER}
              from dual
         </foreach>
         ) 
  	</insert>

	<!-- 删除用户 -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}  
  	</delete>
  	
  	<!-- 批量删除用户 -->
	<delete id="deleteUserByBatch" parameterType="java.util.Map" >
	 delete from user
	 where id IN 
	     <foreach item="ids" collection="iList" open="(" separator="," close=")">
	         #{ids,jdbcType=DECIMAL}
	     </foreach>
	</delete>

	<!-- 更新用户 -->
	<update id="updateByPrimaryKey" parameterType="com.chillax.dto.User" >  
	    update user  
		<set >  
		  <if test="name != null" >  
		    name = #{name,jdbcType=VARCHAR},  
		  </if>  
		  <if test="password != null" >  
		    password = #{password,jdbcType=VARCHAR},  
		  </if>  
		  <if test="age != null" >  
		    age = #{age,jdbcType=INTEGER},  
		  </if>  
		</set>  
		where id = #{id,jdbcType=INTEGER} 
  	</update>
  
</mapper>